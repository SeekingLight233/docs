(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{652:function(t,e,a){t.exports=a.p+"assets/img/old.d8c7702b.png"},776:function(t,e,a){"use strict";a.r(e);var s=a(8),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"代数效应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代数效应"}},[t._v("#")]),t._v(" 代数效应")]),t._v(" "),s("p",[t._v("代数效应是 FP 中的理念,算是一种处理 side effect 的一种机制吧.")]),t._v(" "),s("p",[t._v("假如有一种叫"),s("code",[t._v("try...handle")]),t._v("的语法,(可以理解为是一个不报错的"),s("code",[t._v("try...catch")]),t._v("),执行完 hanle 之后仍然会回到之前的状态,于是就能够实现"),s("code",[t._v("中断-恢复")]),t._v("这一重要机制.")]),t._v(" "),s("p",[t._v("假如说 es2025 能有个这语法,他们实现"),s("code",[t._v("异步可中断的更新")]),t._v("应该会容易许多.")]),t._v(" "),s("h2",{attrs:{id:"为啥不用generate实现异步可中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为啥不用generate实现异步可中断"}},[t._v("#")]),t._v(" 为啥不用"),s("code",[t._v("generate")]),t._v("实现异步可中断?")]),t._v(" "),s("p",[t._v("优先级.因为 generate 只能实现中断,不能实现优先级.")]),t._v(" "),s("h2",{attrs:{id:"老的-react-架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#老的-react-架构"}},[t._v("#")]),t._v(" 老的 React 架构")]),t._v(" "),s("p",[s("img",{attrs:{src:a(652),alt:""}})]),t._v(" "),s("p",[t._v("只有协调器和渲染器")]),t._v(" "),s("p",[t._v("协调器管 diff,渲染器进行渲染,并且不支持"),s("strong",[t._v("异步可中断的更新")]),t._v(".")]),t._v(" "),s("p",[t._v("以前的协调器也叫 stack reconciler\n16 以后的协调器叫 fiber reconciler")]),t._v(" "),s("h2",{attrs:{id:"jsx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx"}},[t._v("#")]),t._v(" JSX")]),t._v(" "),s("p",[t._v("JSX 是 "),s("code",[t._v("React.createElement")]),t._v("的语法糖.")]),t._v(" "),s("p",[t._v("它接收三个参数,并且返回一个名为 ReactElement 的新函数作为返回值,该函数返回一个包含组件数据的对象")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReactElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ReactCurrentOwner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    props\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("ul",[s("li",[s("p",[t._v("第一个参数为 type, type 为原生 html 节点字符串或者 Component (Component 有可能为 classComponent,也有可能为 functionComponent)")])]),t._v(" "),s("li",[s("p",[t._v("第二个参数为节点上的属性,第三个参数为 jsx 上的子元素")])])]),t._v(" "),s("p",[t._v("当调用完"),s("code",[t._v("React.createElement")]),t._v("之后,此次就有了组件的内容和结构,这为接下来创建 fiber 做了铺垫.")]),t._v(" "),s("h2",{attrs:{id:"render-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#render-阶段"}},[t._v("#")]),t._v(" render 阶段")]),t._v(" "),s("h3",{attrs:{id:"挂载阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挂载阶段"}},[t._v("#")]),t._v(" 挂载阶段")]),t._v(" "),s("p",[t._v("会对 上面的 jsx 对象 上的每一个节点进行 dfs,也就是说每一个节点都会执行 beiginWork 和 completeWork")]),t._v(" "),s("p",[t._v("在递进去的时候会执行 beginWork\n在归出来的时候会执行 completeWork,最终会返回 一颗完整的 workInprogress fiber.")]),t._v(" "),s("h3",{attrs:{id:"更新阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段"}},[t._v("#")]),t._v(" 更新阶段")]),t._v(" "),s("p",[t._v("更新时 current 已经存在了,此时要根据 current 中的 fiber 进行对比创建 workInprogress fiber.")]),t._v(" "),s("p",[t._v("在 render 的整个过程中(不管是挂载还是更新),会对要操作的 dom 打上 tag,这些 tag 会串成一根双向链表,然后放到 commit 阶段统一处理.")]),t._v(" "),s("h3",{attrs:{id:"更新阶段中-diff-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段中-diff-算法"}},[t._v("#")]),t._v(" 更新阶段中 diff 算法")]),t._v(" "),s("p",[t._v("在 render 阶段,会执行"),s("code",[t._v("reconcileChildFibers")]),t._v(",这个方法会把 jsx 对象和当前的 fiber(current fiber)进行比对,在内存中生成一个 vdom(React 中叫 workInProgress Fiber).")]),t._v(" "),s("h4",{attrs:{id:"react-中-diff-算法的剪枝策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-中-diff-算法的剪枝策略"}},[t._v("#")]),t._v(" React 中 diff 算法的剪枝策略:")]),t._v(" "),s("ol",[s("li",[t._v("只对同级元素进行 diff,如果一个 dom 在更新的过程中跨了层级,React 不会去尝试复用这个 dom.")]),t._v(" "),s("li",[t._v("tag 和 key 不同,则直接销毁.")])]),t._v(" "),s("h3",{attrs:{id:"单一节点的-diff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单一节点的-diff"}},[t._v("#")]),t._v(" 单一节点的 diff")]),t._v(" "),s("p",[t._v("单节点的 diff 逻辑很简单,就是比较前后的 key 和 tagName,完全相同才复用.")]),t._v(" "),s("h3",{attrs:{id:"多节点的-diff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多节点的-diff"}},[t._v("#")]),t._v(" 多节点的 diff")]),t._v(" "),s("p",[t._v("多节点的要处理的情况有点多,总共需要遍历两轮,第一轮处理更新,第二轮处理增删和位置变化.")]),t._v(" "),s("h4",{attrs:{id:"第一轮遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一轮遍历"}},[t._v("#")]),t._v(" 第一轮遍历")]),t._v(" "),s("p",[t._v("遍历比较 jsx 里的"),s("code",[t._v("newChildren")]),t._v("和"),s("code",[t._v("oldFiber")]),t._v(".遍历会走接下来的逻辑")]),t._v(" "),s("ul",[s("li",[t._v("只要 key 不同,就会跳出当前遍历")]),t._v(" "),s("li",[t._v("如果 type 不同,会在这步先给 oldFiber 打上"),s("code",[t._v("DELETION")]),t._v("的标记,然后创建一个新的 fiber,并打上"),s("code",[t._v("Placement")])])]),t._v(" "),s("p",[s("code",[t._v("oldFiber")]),t._v("和"),s("code",[t._v("newChildren")]),t._v("中只要有一个遍历完,就会跳出当前循环")]),t._v(" "),s("h4",{attrs:{id:"第二轮遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二轮遍历"}},[t._v("#")]),t._v(" 第二轮遍历")]),t._v(" "),s("p",[t._v("对于第一轮遍历,会产生四种结果.")]),t._v(" "),s("p",[t._v("第一轮遍历结束后,会会产生四种结果.")]),t._v(" "),s("ol",[s("li",[t._v("newChildren 和 oldFiber 都遍历完")])]),t._v(" "),s("p",[t._v("说明他们一样长,此时不需要处理,第一轮就已经更新好了")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("只有 newChildren 没跑完")])]),t._v(" "),s("p",[t._v("此时说明有新节点,接下来只需要遍历新节点并给他们打上"),s("code",[t._v("Placement")]),t._v("标记")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("只有 oldFiber 没跑完")])]),t._v(" "),s("p",[t._v("此时说明删节点了,只需要遍历 oldFiber 并给他们打上"),s("code",[t._v("DELETION")]),t._v("标记")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("这俩都没遍历完")])]),t._v(" "),s("p",[t._v("想想什么情况下这俩都没遍历完呢?没错,就是上面由于 key 不同导致跳出的循环!\n此时说明节点位置发生了变化.")]),t._v(" "),s("p",[t._v("那如何处理移动的节点呢?")]),t._v(" "),s("p",[t._v("首先,先将所有没处理的"),s("code",[t._v("oldFiber")]),t._v("存到一个 map 中,key 为"),s("code",[t._v("oldFiber")]),t._v("中的 key,value 为"),s("code",[t._v("oldFiber")]),t._v("自身")]),t._v(" "),s("p",[t._v("接下来"),s("strong",[t._v("一边遍历 newChildren,一边往 oldFiber 上打 tag")]),t._v(",同时用一个变量来存储"),s("strong",[t._v("上一次复用节点的位置")]),t._v("(lastPlacedIndex)")]),t._v(" "),s("p",[t._v("在接下来的过程中,如果 newChildren 中所对应的"),s("code",[t._v("oldIndex>=lastPlacedIndex")]),t._v(',就通过 map,给旧的 fiber 上打上"复用"的标记')]),t._v(" "),s("p",[t._v("否则就移动 oldFiber 中对应的节点.")]),t._v(" "),s("p",[t._v("(说人话就是我们需要看当前遍历对象已经存在的索引位置是不是比上次 fiber 中的索引位置小,如果小的话就往右边挪)")]),t._v(" "),s("h2",{attrs:{id:"commit-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-阶段"}},[t._v("#")]),t._v(" commit 阶段")]),t._v(" "),s("h3",{attrs:{id:"before-mutation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#before-mutation"}},[t._v("#")]),t._v(" before mutation")]),t._v(" "),s("p",[t._v("执行"),s("code",[t._v("commitBeforeMutationEffect")]),t._v(".\n这个函数主要做了两件事.")]),t._v(" "),s("ol",[s("li",[t._v("获取当前的 dom 快照")]),t._v(" "),s("li",[t._v("根据优先级调度副作用")])]),t._v(" "),s("h3",{attrs:{id:"mutation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutation"}},[t._v("#")]),t._v(" mutation")]),t._v(" "),s("p",[t._v("遍历 effectlist,依次执行"),s("code",[t._v("commitMutationEffects")]),t._v(",在遍历的过程中会根据"),s("code",[t._v("EffectTag")]),t._v("的类型来调用不同的函数处理 fiber")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",[t._v("在这两个阶段之间,root.current 会暂时指向 finishedWork.")])]),t._v(" "),s("h3",{attrs:{id:"layout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#layout"}},[t._v("#")]),t._v(" layout")]),t._v(" "),s("p",[t._v("会再次遍历 effectlist,并依次执行"),s("code",[t._v("commitMutationEffects")]),t._v(",该方法依然会根据"),s("code",[t._v("EffectTag")]),t._v("类型来处理 fiber,并最终更新 ref.")])])}),[],!1,null,null,null);e.default=r.exports}}]);